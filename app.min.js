// INSERT ANSWERS, ANSWER STATUS TABLE

// Setting [answerSheet] via <input> (button, content, table)

// setting table (button, content)

// button

let generateAnswerStatusTableBtn = document.getElementById("answerInputTableBtn");
generateAnswerStatusTableBtn.addEventListener("click", answerStatusTable);

let loaderIndexAnswerStatusTable = 1;

// set answerStatusTable
function answerStatusTable(){
    if(loaderIndexAnswerStatusTable === 1){
        generateAnswerStatusTable();
        document.getElementById("answerInputTableBtn").innerHTML = "<i>Close</i>";
        loaderIndexAnswerStatusTable = 0;
    }else{
        document.getElementsByClassName("answerInputTableContent")[0].childNodes[0].remove();
        document.getElementById("answerInputTableBtn").innerHTML = "Answer Status Table";
        loaderIndexAnswerStatusTable++;
    }
}

// answer status table
function generateAnswerStatusTable(){
    
    let answerInputTable = document.getElementsByClassName("answerInputTableContent")[0];
    let answerStatusTable = document.createElement("table");
    let answerStatusTableBody = document.createElement("tbody");
    // top side (N, 1 2 3 4)
    for(let i=0; i<1; i++){
        let raw = document.createElement("tr");
        for(let n=0; n<1; n++){
            let head = document.createElement("th");
            let headText = document.createElement("div");
            headText.innerHTML = "N";

            head.appendChild(headText);
            raw.appendChild(head);
        }
        for(let j=0; j<4; j++){
            let head = document.createElement("th");
            let headText = document.createElement("div");
            headText.innerHTML = `${j+1}`;

            head.appendChild(headText);
            raw.appendChild(head);
        }
        answerStatusTableBody.appendChild(raw);
    }
    // main content 
    for(let i=0; i<checkSheet.length; i++){
        let raw = document.createElement("tr");
        for(let n=0; n<1; n++){
            let head = document.createElement("th");
            let headText = document.createElement("div");
            headText.innerHTML = `${i+1}`;

            head.appendChild(headText);
            raw.appendChild(head);
        }
        for(let j=0; j<4; j++){
            let head = document.createElement("td");
            let headText = document.createElement("div");
            // headText.innerHTML = `${j+1}`;
            if(answerSheet[i]){
                headText.innerHTML = `${answerSheet[i][j]}`;
                // get rid of printing 'undefined'
                if(answerSheet[i] == ""){
                    head.style.backgroundColor = "#f0eadd";
                    headText.innerHTML = "";
                }
            }else{
                // headText.innerHTML = `empty`;
                head.style.backgroundColor = "#f0eadd";
            }
            // console.log(`${answerSheet[i]}`)

            head.appendChild(headText);
            raw.appendChild(head);
        }
        answerStatusTableBody.appendChild(raw);
    }

    answerStatusTable.appendChild(answerStatusTableBody);
    answerInputTable.appendChild(answerStatusTable);
    // return "loaded";
}


//////////////////////////////////////////////////////////////////////////////////////////
// setting button (Insert Answers)

let loadInsertAnswersBtn = document.getElementById("answerInputBtn");
loadInsertAnswersBtn.addEventListener("click", loadInsertAnswers);

function loadInsertAnswers(){
    // evaluate checkSheet's sectionValue to be assigned 
    // WARNING ${valueSec} is local variable (another local use in another function)
    let valueSec = document.getElementById("selectCheckSheetSec").value;

    // console.log(`ValueSec ${valueSec}`);
    
    checkSheet = eval(`checkSheetSec${valueSec}`);
    
    // btn  on / off
    if(window.innerWidth > 500){
        if(document.getElementsByClassName("answerInput_content")[0].style.height == "60px"){
            document.getElementsByClassName("answerInput_content")[0].style.height = "0px";
            loadInsertAnswersBtn.innerHTML = "<i>Insert</i> Answers";
        }else{
            document.getElementsByClassName("answerInput_content")[0].style.height = "60px";
            loadInsertAnswersBtn.innerHTML = "<i>Close</i>";
            // loadInsertAnswersBtn.innerHTML = "<div><div>Close</div><div>(Note Type '0' if answer absents)</div></div>";
        }
    }else{
        if(document.getElementsByClassName("answerInput_content")[0].style.height == "100px"){
            document.getElementsByClassName("answerInput_content")[0].style.height = "0px";
            loadInsertAnswersBtn.innerHTML = "<i>Insert</i> Answers";
        }else{
            document.getElementsByClassName("answerInput_content")[0].style.height = "100px";
            loadInsertAnswersBtn.innerHTML = "<i>Close</i>";
        }
    }
    
    // calling here for setting needed 'checkSheetSec' to [checkSheet]
    setAnswerSheetEmptyArrays();

    setTaskIndex();
}


// setting content
function setAnswerSheetEmptyArrays(){
    // pushing empty arrays to [answerSheet]
    for(let i in checkSheet){
        answerSheet.push([]);
        // answersOfFollowingTask.push([]);
    }
    // console.log(`func exec. ${checkSheet}`);
}


// Setting selectAnswerInputNumber btn (to choose the index of the task)


// getting instant value by event

//declaring dom event of <SELECT> TaskIndex 
let selectTaskIndex = document.getElementById("selectAnswerInputNumber");
selectTaskIndex.addEventListener("change", getTaskIndexValue);

// dom event's function of <SELECT> TaskIndex

// default value
let valueOfSelectTaskIndex = 1;

function getTaskIndexValue(){
    valueOfSelectTaskIndex = document.getElementById("selectAnswerInputNumber").value;
    // console.log(`TaskIndex ${valueOfSelectTaskIndex}`);
}


// declaring outside for using in another
let optionTaskIndex;

// setTaskIndex fucnton
function setTaskIndex(){
    for(let i in checkSheet){
        let selectTaskIndex = document.getElementById("selectAnswerInputNumber");
        optionTaskIndex = document.createElement("OPTION");

        optionTaskIndex.text = `${+i+1} Task`;
        optionTaskIndex.value = i;
        selectTaskIndex.appendChild(optionTaskIndex);
        // console.log(`optVal ${optionTaskIndex.value}`);
    }
}

// submitAnswerInput

// document.getElementById("answerInput").placeholder = `Insert the answer: ${valueOfSelectTaskIndex}`;

let submitAnswerInput = document.getElementById("answerSubmit");
submitAnswerInput.addEventListener("click", getValueAnswerInput);

function getValueAnswerInput(){
    // getting value from <input> then spliting it


    for(let i in checkSheet){

        // answer's input validation (regexp)
        let answerRegexp = /[1-4-]{4}/;

        if(answerRegexp.test(document.getElementById("answerInput").value)){
            submitInputValue = document.getElementById("answerInput").value;
            // console.log(`if`);
        }else{
            // console.log(`else`);
            break;
        }


        if(answerSheet[i] == ""){
            for(let c in submitInputValue){
                answersOfFollowingTask.push(+submitInputValue[c]);
                // console.log(`vs ${optionTaskIndex.value}`);
                answerSheet[i].push(+submitInputValue[c]);
                // console.log(`i ${i}`);
            }
            }else{
                // if answerSheet[i] is not empty 'continue;' ...
                // ... for omitting from assigning value to ' "" ' nothing
                continue;
            }

        document.getElementById("answerInput").value = "";
    }
    // doesn't differ which one to choose [answerSheet] or [checkSheet]
    for(let i in checkSheet){
        // console.log(`a ${i}`);
    }

    // increments inner index's value of answerInput form
    // valueOfSelectTaskIndex++;
    document.getElementById("answerInput").placeholder = `Insert the answer:`;
    // document.getElementById("answerInput").placeholder = `Insert the answer: ${valueOfSelectTaskIndex}`;
}
 

// BACK TO TOP

// backToTop state

// state before being scrolled
if(document.documentElement.scrollTop > 100){
    backToTop.style.display = "block";
}

// state after scrolling
window.addEventListener("scroll", setBackToTop);

function setBackToTop(){
    if(document.documentElement.scrollTop > 100 || document.body.scrollTop > 100){
        backToTop.style.display = "block";
    }else{
        backToTop.style.display = "none";
    }
}

// backToTop function

backToTop = document.getElementById("backToTop");
backToTop.addEventListener("click", scrollUp);

function scrollUp(){
    scrollDuration = 700;
    document.documentElement.scrollTop = 0;
}



// functionality in MAIN_TABLE

// Checks answers

function checkAnswers(){
    // Checking answers (comparing elem by elem)
    for(let i = 0; i < checkSheet.length; i++){
        resultSheet.push([]);
        for(let j = 0; j < checkSheet[0].length; j++){
            if(answerSheet[i][j] == checkSheet[i][j]){
                resultSheet[i].push("true");
            }
            else if(isNaN(answerSheet[i][j])){
                resultSheet[i].push("-");
            }
            else{
                resultSheet[i].push("false");
            }
        }
    }
    // console.log(`ResultSheet`);
    // console.log(resultSheet);

    // Getting Statistics ([resultSheet] -> {overallResultSheet})
    for(let i = 0; i < resultSheet.length; i++){
        for(let j = 0; j < resultSheet[0].length; j++){
            
            // presenting [resultSheet] elems in [simpleResultSheet] (from 2d -> 1d)
            simpleResultSheet.push(resultSheet[i][j]);

            // getting statistics in {overallResultSheet}
            overallResultSheet['trueAnswers'] = simpleResultSheet.filter(match => match == "true").length;
            overallResultSheet['falseAnswers'] = simpleResultSheet.filter(match => match == "false").length;
            overallResultSheet['emptyAnswers'] = simpleResultSheet.filter(match => match == "-").length;
            
            // console.log(overallResultSheet);
        }
    }

    // console.log(`overallResultSheet`);
    // console.log(overallResultSheet);
}// MAIN_TABLE

// Generate Table (button, content)

// button

// done in 'script.js'

// content

function generateResultTable(){

    let body = document.getElementsByTagName("body")[0];
    
    let tbl = document.createElement("table");

    // tbl.classList.add("tbl");

    let tblBody = document.createElement("tbody");
    // top side (N, 1 2 3 4)
    for(let i = 0; i < 1; i++){
        let row = document.createElement("tr");
        for(let j = 0; j < 1; j++){
            let head = document.createElement("th");
            let headText = document.createTextNode("N");

            head.appendChild(headText);
            row.appendChild(head);
        }
        for(let j = 0; j < 4; j++){
            let cell = document.createElement("th");
            let cellText  = document.createTextNode(`${j+1}`);

            cell.appendChild(cellText);
            row.appendChild(cell);
        }
        tblBody.appendChild(row);
    }
    
    // table main content
    for(let n = 0; n < checkSheet.length; n++){
        // table height
        for(let i = 0; i < 1; i++){
            let row = document.createElement("tr");
            
            // lf side (1,2,3...9,10)
            for(let j = 0; j < 1; j++){
                let head = document.createElement("th");
                // table number of task
                let headText = document.createTextNode(`${n+1}`);
    
                head.appendChild(headText);
                row.appendChild(head);
            }
            // table width (task values 3in1)
            for(let j = 0; j < 4; j++){
                let cell = document.createElement("td");

                // div of AnserSheetValue and CheckSheetValue (2 of 3)
                let valueAnswerSheetCheckSheet = document.createElement("div");
                
                valueAnswerSheetCheckSheet.style.display = "flex";
                valueAnswerSheetCheckSheet.style.justifyContent = "space-evenly";

                    let answerSheetValue  = document.createElement("p");
                    // checks whether "undefined" or not (could also check during "Prompt")
                    if(typeof answerSheet[n][j] == "undefined"){
                        answerSheetValue.innerHTML = `-`;
                    }else{
                        answerSheetValue.innerHTML = `${answerSheet[n][j]}`;
                    }

                    let checkSheetValue  = document.createElement("p");
                    checkSheetValue.innerHTML = `${checkSheet[n][j]}`;

                    valueAnswerSheetCheckSheet.appendChild(answerSheetValue);
                    valueAnswerSheetCheckSheet.appendChild(checkSheetValue);

                // h3 of resultSheetValue (1 of 3 (last))
                let resultSheetValue  = document.createElement("h3");
                resultSheetValue.innerHTML = `${resultSheet[n][j]}`;

                    // coloring resultSheetValue backgrounds (true, false, - => to green, red, #ebecec)
                    if(resultSheetValue.innerHTML == "true"){
                        resultSheetValue.style.backgroundColor = "green";

                    }else if(resultSheetValue.innerHTML == "false"){
                        resultSheetValue.style.backgroundColor = "red";
                    }else{
                        resultSheetValue.style.backgroundColor = "#ebecec";
                    }

                cell.appendChild(valueAnswerSheetCheckSheet);
                cell.appendChild(resultSheetValue);
                row.appendChild(cell);
            }
            tblBody.appendChild(row);
        }
    }

    // bottom side 1 (Stat, trueAnswers falseAnswers emptyAnswers All)
    for(let i = 0; i < 1; i++){
        let row = document.createElement("tr");
        // Stat.
        for(let j = 0; j < 1; j++){
            let head = document.createElement("th");
            let headText = document.createTextNode("Stat.");

            head.appendChild(headText);
            row.appendChild(head);
        }
        let keysOverallResultSheet = Object.getOwnPropertyNames(overallResultSheet);
        // console.log(`keys`);
        // console.log(keysOverallResultSheet);

        // {overallResultSheets} keys presented by [keysOverallResultSheet]
        for(let j = 0; j < 3; j++){
            let head = document.createElement("th");

            let headText = document.createElement("h4");
            headText.innerHTML = `${keysOverallResultSheet[j]}`;

                if(headText.innerHTML == "trueAnswers"){
                    headText.style.color = "green";
                    headText.style.border = "1px solid green";
                }else if(headText.innerHTML == "falseAnswers"){
                    headText.style.color = "red";
                    headText.style.border = "1px solid red";
                }else{
                    headText.style.color = "grey";
                    headText.style.border = "1px solid grey";
                }

            head.appendChild(headText);
            row.appendChild(head);
        }
        // bottom side "All"
        for(let j = 0; j < 1; j++){
            let head = document.createElement("th");
            let headText = document.createTextNode(`All`);

            head.appendChild(headText);
            row.appendChild(head);
        }
        tblBody.appendChild(row);
    }
    // bottom side 2 (answers)
    for(let i = 0; i < 1; i++){
        let row = document.createElement("tr");
        // -
        for(let j = 0; j < 1; j++){
            let head = document.createElement("th");
            let headText = document.createTextNode("");

            head.appendChild(headText);
            row.appendChild(head);
        }
        // value of trueAnswers
        for(let j = 0; j < 1; j++){
            let cell = document.createElement("td");
            let cellText1  = document.createTextNode(`${overallResultSheet["trueAnswers"]}`);

            cell.appendChild(cellText1);
            row.appendChild(cell);
        }
        // value of falseAnswers
        for(let j = 0; j < 1; j++){
            let cell = document.createElement("td");
            let cellText1  = document.createTextNode(`${overallResultSheet["falseAnswers"]}`);

            cell.appendChild(cellText1);
            row.appendChild(cell);
        }
        // value of emptyAnswers
        for(let j = 0; j < 1; j++){
            let cell = document.createElement("td");
            let cellText1  = document.createTextNode(`${overallResultSheet["emptyAnswers"]}`);

            cell.appendChild(cellText1);
            row.appendChild(cell);
        }
        // number of all tasks
        for(let j = 0; j < 1; j++){
            let cell = document.createElement("td");
            let cellText1  = document.createTextNode(`${simpleResultSheet.length}`);

            cell.appendChild(cellText1);
            row.appendChild(cell);
        }

        tblBody.appendChild(row);
    }
    tbl.appendChild(tblBody);
    
    let table = document.getElementById("table_block")
    table.appendChild(tbl);
}// Select

// Sel subj

let selSubj_Select = document.getElementById("selectCheckSheetSubj");

selSubj = selSubjObj;

// generating subj options
genSelectOption(selSubj_Select, selSubj);

selSubj_Select.addEventListener("change", genYearBySubj);

// set [selYear] depending on [selSubj]
function genYearBySubj(){
    for(let subj = 0; subj < selSubj.length; subj++){
        if(selSubj_Select.value == selSubj[subj]){
            selYear = selYearObj[subj];
            break;
        }
    }

    // generating year options
    genSelectOption(selYear_Select, selYear);
}



// Sel year 

let selYear_Select = document.getElementById("selectCheckSheetYear");

selYear_Select.disabled = true;

selYear_Select.addEventListener("change", genRepByYear);

// set [selRep] depending on [selYear]
function genRepByYear(){
    // Setting selRep
    for(let subj = 0; subj < selSubj.length; subj++){
        if(selSubj_Select.value == selSubj[subj]){
            for(let year = 0; year < selYear.length; year++){
                if(selYear_Select.value == selYear[year]){
                    selRep = selRepObj[subj][year];
                    break;
                }
            }
        }
    }

    // generating rep options
    genSelectOption(selRep_Select, selRep);
}



// Sel rep

let selRep_Select = document.getElementById("selectCheckSheetRep");

selRep_Select.disabled = true;

selRep_Select.addEventListener("change", genChapByRep);

function genChapByRep(){
    // Setting selChap
    // Setting subjYearRep depending on (Subj>Year>Rep)
    for(let subj = 0; subj < selSubj.length; subj++){
        if(selSubj_Select.value == selSubj[subj]){
            for(let year = 0; year < selYear.length; year++){
                if(selYear_Select.value == selYear[year]){
                    for(let rep = 0; rep < selRep.length; rep++){
                        if(selRep_Select.value == selRep[rep]){
                            selChap = selChapObj[subj][year][rep];
                            subjYearRep = repKeys[subj][year][rep];
                            break;
                        }
                    }
                }
            }
        }
    }

    // generating rep options
    genSelectOption(selChap_Select, selChap);
}



// sel chap

let selChap_Select = document.getElementById("selectCheckSheetChap");

selChap_Select.disabled = true;

selChap_Select.addEventListener("change", genSecByChap);

// #task add shift nuance in phys secs

function genSecByChap(){
    selSec = selSecObj;

    // Setting selSec
    for(let subj = 0; subj < selSubj.length; subj++){
        if(selSubj_Select.value == selSubj[subj]){
            for(let year = 0; year < selYear.length; year++){
                if(selYear_Select.value == selYear[year]){
                    for(let rep = 0; rep < selRep.length; rep++){
                        if(selRep_Select.value == selRep[rep]){
                            for(let chap = 0; chap < selChap.length; chap++){
                                if(selChap_Select.value == selChap[chap]){
                                    selSec = selSecObj[subj][year][rep][chap];
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // generating rep options
    genSelectOption(selSec_Select, selSec);
}



// Sel sec

let selSec_Select = document.getElementById("selectCheckSheetSec");

let selSec;

selSec_Select.disabled = true;

selSec_Select.addEventListener("change", genAnswersheetBySec);

function genAnswersheetBySec(){
    // Setting selAnswersheet
    // Setting pageNumber
    for(let subj = 0; subj < selSubj.length; subj++){
        if(selSubj_Select.value == selSubj[subj]){
            for(let year = 0; year < selYear.length; year++){
                if(selYear_Select.value == selYear[year]){
                    for(let rep = 0; rep < selRep.length; rep++){
                        if(selRep_Select.value == selRep[rep]){
                            for(let chap = 0; chap < selChap.length; chap++){
                                if(selChap_Select.value == selChap[chap]){
                                    for(let sec = 0; sec < selSec.length; sec++){
                                        if(selSec_Select.value == selSec[sec]){
                                            pageNumber = secPageNumbers[subj][year][rep][chap][sec];
                                            // console.log('checking overload times');
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

}





// function declarations

function genSelectOption(selFilter_Select, selFilter){
    // avoiding from overgen options
    selFilter_Select.options.length = 1;
    // gen options
    for(let i = 0; i < selFilter.length; i++){
        let option = document.createElement("OPTION");
        option.text = `${selFilter[i]}`;
        option.value = `${selFilter[i]}`;
        selFilter_Select.add(option);
    }
    selFilter_Select.disabled = false;
}


// clear select
let clearBtn = document.getElementById("clearSelect");

// clearBtn.disabled = true;

clearBtn.addEventListener("dblclick", clearSelect);

function clearSelect(){
    
    selSubj_Select.value = "";
    selYear_Select.value = "";
    selYear_Select.disabled = true;

    selRep_Select.value = "";
    selRep_Select.disabled = true;

    selChap_Select.value = "";
    selChap_Select.disabled = true;
    
    selSec_Select.value = "";
    selSec_Select.disabled = true;

    // repKeys = "";
    // secPageNumbers = "";
}


















































// IFRAME

// #task (additional read material) 'import' & 'export' nuance;

// #task remove ad, (tried once,but met XSS (Cross-site scripting) disturber circumstance)

// def vals (avoid from error in case of clicking loafIframe without pointing 'select' filters)
let subjYearRep = repKeys[0][0][0]; 
let pageNumber = 1;


function loadIframe(subjYearRep, pageNumber){
    
    let iframeLink = `https://online.fliphtml5.com/ywkgy/${subjYearRep}/#p=${pageNumber}`;

    document.getElementById("iframeSource").src = iframeLink; 

    // load and disload iframe
    let iframeBtn = document.getElementById("loadIframe");

    if(document.getElementsByClassName("iframe_content")[0].style.display == ""){
        document.getElementsByClassName("iframe_content")[0].style.display = "block";
        iframeBtn.innerHTML = "Disload Iframe";
    }else{
        document.getElementsByClassName("iframe_content")[0].style.display = "";
        iframeBtn.innerHTML = "Load Iframe";
    }
} 


loadIframeBtn = document.getElementById("loadIframe");
loadIframeBtn.addEventListener("click", function(){loadIframe(subjYearRep, pageNumber);});


// TIMER

// Setting Timer (Stopwatch) 

let showTimer = document.getElementById('sub_timer_time'),
    start = document.getElementById('startTimer'),
    stop = document.getElementById('stopTimer'),
    clear = document.getElementById('clearTimer'),
    seconds = 0, minutes = 0, hours = 0,
    t;

function setTimer() {

    function add() {
        seconds++;
        if (seconds >= 60) {
            seconds = 0;
            minutes++;
            if (minutes >= 60) {
                minutes = 0;
                hours++;
            }
        }

        showTimer.textContent = (hours ? (hours > 9 ? hours : "0" + hours) : "00") + ":" + (minutes ? (minutes > 9 ? minutes : "0" + minutes) : "00") + ":" + (seconds > 9 ? seconds : "0" + seconds);

        startTimer();
    }

    startTimer = function () {
        t = setTimeout(add, 1000);
    }

    stopTimer = function () {
        clearTimeout(t);
    }

    clearTimer = function () {
        showTimer.textContent = "00:00:00";
        seconds = 0; minutes = 0; hours = 0;
        stopTimer();

        let startBtn = document.getElementById("startTimer");
        if(startBtn.style.display == ""){
            stopBtn.style.display = "";
            startBtn.style.display = "block";
        }
    }

    let startBtn = document.getElementById("startTimer");
    let stopBtn = document.getElementById("stopTimer");

    // toggle btn (start/stop)
    function startStopTimer() {
        if (stopBtn.style.display == "") {

            startBtn.style.animation = "btn_appear 1s linear .1";
            stopBtn.style.animation = "btn_disappear 1s linear .1";

            setTimeout(function () { startBtn.style.display = "none"; }, 100);
            setTimeout(function () { stopBtn.style.display = "block"; }, 100);

            // when start btn clicked, dialog disappears
            document.getElementById("timerDialog").style.animation = "timerDialog2 10s linear 1";
            setTimeout(function () { document.getElementById("timerDialog").style.display = "none"; }, 500);
        } else{
            startBtn.style.animation = "btn_disappear 1s linear .1";
            stopBtn.style.animation = "btn_appear 1s linear .1";

            setTimeout(function () { stopBtn.style.display = ""; }, 100);
            setTimeout(function () { startBtn.style.display = "block"; }, 100);
        }
    }
    function setStartStopDefBtn(){
        // when clear btn clicked, pause button avatar clears
        if (startBtn.style.display == "none") {
            stopBtn.style.display = "";
            startBtn.style.display = "block";
        }
    }

    start.addEventListener("click", startStopTimer);
    start.addEventListener("click", startTimer);

    stop.addEventListener("click", startStopTimer);
    stop.addEventListener("click", stopTimer);

    clear.addEventListener("click", setStartStopDefBtn);
    clear.addEventListener("click", clearTimer);

}

setTimer();




// Dialogs (Message Block)

// Timer 

window.addEventListener("scroll", markTimerControler);

// state 
let timerDialogAnimTime = 10000;

// getting same effect, when refreshing in at pos under scrollTop > ...
if (document.documentElement.scrollTop > 100){
    document.getElementById("timerDialog").style.display = "block";
    document.getElementById("timerDialog").style.animation = `timerDialog 10s linear 1`;
    setTimeout(function () { document.getElementById("timerDialog").style.display = "none"; }, timerDialogAnimTime);
}

// function

let doneTheStuff;

function markTimerControler() {
    if (document.documentElement.scrollTop > 100) {
        if (!doneTheStuff) {
            document.getElementById("timerDialog").style.display = "block";
            doneTheStuff = true;
        }
        // NOTE 'display' property doesn't work in animations
        document.getElementById("timerDialog").style.animation = `timerDialog 10s linear 1`;
        setTimeout(function () { document.getElementById("timerDialog").style.display = "none"; }, timerDialogAnimTime);
    }
}


// header height depending on screen size
document.getElementById("header").style.height = `${innerHeight}px`;


