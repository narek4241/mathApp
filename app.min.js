// Header height

// Setting Header height to screen size 
document.getElementById('header').style.height = `${innerHeight + 35}px`;

// Rec-ing any changes of Header height screen size 
window.addEventListener('resize', refreshHeaderHeight);

function refreshHeaderHeight() {
    document.getElementById('header').style.height = `${innerHeight + 35}px`;
}



// NOTE THIS CODE IS DUPLICATE FROM 'SCROLL.JS' #duplicate

// // Scroll Header

// let headerGetStartedBtn = document.getElementById('headerGetStartedBtn');

// later global use
// let headerScrollDown = document.getElementById("header").style.height;
// headerScrollDown = +(headerScrollDown.substring(0, headerScrollDown.length - 2));

// headerGetStartedBtn.addEventListener('click', function(){
//     setTimeout(scrollPageTo('header', 'headerScrollDown', 0),
//     document.getElementById('mainBody').style.overflow = 'visible', 250)});


// Scroll Module Function (for Header, Timer, Select, Iframe, InsAnsw)  

headerGetStartedBtn.addEventListener('click', function () { blurilize('header') });

function blurilize(elementId, prevElementId) {
    document.getElementById(elementId).style.filter = 'blur(5px)';
    if (prevElementId) {
        document.getElementById(prevElementId).style.filter = 'blur(0px)';
    }
}

function scrollPageTo(selector, selectorScrollDown, prevSelectorScrollDown) {
    let scrollDown = `${document.getElementById(selector).style.height}`;
    // scroll To
    scrollDown = scrollDown.substring(0, scrollDown.length - 2);
    scrollDown = +scrollDown + +prevSelectorScrollDown;
    window.scrollTo(0, scrollDown);
    // for next calls
    selectorScrollDown = scrollDown;
    prevSelectorScrollDown = scrollDown;
}

// </--> NOTE THIS CODE IS DUPLICATE FROM 'SCROLL.JS' #duplicate






// OPEN FULLSCREEN 

/* Get the documentElement (<html>) to display the page in fullscreen */
var elem = document.documentElement;

// did to detect 'F11' or 'esc', and change matching images
window.onresize = function(){
    if(window.innerHeight == screen.height){
        openFs.classList +=  ` sub_headerNav__openFullscreen-close`;
    }else{
        openFs.classList.remove `sub_headerNav__openFullscreen-close`;
        openFs.classList += ` sub_headerNav__openFullscreen-open`;
    }
}

let loaderOpenFullscreen = 0;

let openFs = document.getElementById('openFullscreen');
openFs.classList +=  ` sub_headerNav__openFullscreen-open`;


/* View in fullscreen */
function openFullscreen() {
    if (loaderOpenFullscreen == 0) {
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        } else if (elem.mozRequestFullScreen) { /* Firefox */
            elem.mozRequestFullScreen();
        } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */
            elem.webkitRequestFullscreen();
        } else if (elem.msRequestFullscreen) { /* IE/Edge */
            elem.msRequestFullscreen();
        }

        openFs.classList +=  ` sub_headerNav__openFullscreen-close`;
        
        loaderOpenFullscreen = 1;
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) { /* Firefox */
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) { /* IE/Edge */
            document.msExitFullscreen();
        }

        openFs.classList.remove `sub_headerNav__openFullscreen-close`;
        openFs.classList += ` sub_headerNav__openFullscreen-open`;
        
        loaderOpenFullscreen = 0;
    }

}

/* Close fullscreen */
// function closeFullscreen() {
//     if (document.exitFullscreen) {
//         document.exitFullscreen();
//     } else if (document.mozCancelFullScreen) { /* Firefox */
//         document.mozCancelFullScreen();
//     } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */
//         document.webkitExitFullscreen();
//     } else if (document.msExitFullscreen) { /* IE/Edge */
//         document.msExitFullscreen();
//     }
// }

let btn = document.getElementById('openFullscreen');
// // let btn2 = document.getElementById('headerOptionalBtn');

btn.addEventListener('click', openFullscreen);
// btn2.addEventListener('click', closeFullscreen);





// Language

window.location.hash = '#eng';

let selLang = document.getElementById('selectLanguage');

selLang.addEventListener('change', setLocationHash);
selLang.addEventListener('change', setLanguage);

function setLocationHash(){
    window.location.hash = selLang.value;
}

function setLanguage(){
    if(window.location.hash == '#eng'){
        document.getElementsByClassName("sub_header__heading")[0].innerHTML = "We Design and Develop";
    }else if(window.location.hash == '#arm'){
        document.getElementsByClassName("sub_header__heading")[0].innerHTML = "Մենք նախագծենգը ու ծրագրովորենգը";
    }else if(window.location.hash == '#rus'){
        document.getElementsByClassName("sub_header__heading")[0].innerHTML = "Мы проектируем и развиваем";
    }
}





// TIMER

// Setting Timer (Stopwatch) 

let showTimer = document.getElementById('sub_timer_time'),
    start = document.getElementById('startTimer'),
    stop = document.getElementById('stopTimer'),
    clear = document.getElementById('clearTimer'),
    seconds = 0, minutes = 0, hours = 0,
    t;

function setTimer() {

    function add() {
        seconds++;
        if (seconds >= 60) {
            seconds = 0;
            minutes++;
            if (minutes >= 60) {
                minutes = 0;
                hours++;
            }
        }

        showTimer.textContent = (hours ? (hours > 9 ? hours : "0" + hours) : "00") + ":" + (minutes ? (minutes > 9 ? minutes : "0" + minutes) : "00") + ":" + (seconds > 9 ? seconds : "0" + seconds);

        startTimer();
    }

    startTimer = function () {
        t = setTimeout(add, 1000);
    }

    stopTimer = function () {
        clearTimeout(t);
    }

    clearTimer = function () {
        showTimer.textContent = "00:00:00";
        seconds = 0; minutes = 0; hours = 0;
        stopTimer();

        let startBtn = document.getElementById("startTimer");
        if(startBtn.style.display == ""){
            stopBtn.style.display = "";
            startBtn.style.display = "block";
        }
    }

    let startBtn = document.getElementById("startTimer");
    let stopBtn = document.getElementById("stopTimer");

    // toggle btn (start/stop)
    function startStopTimer() {
        if (stopBtn.style.display == "") {

            startBtn.style.animation = "btn_appear 1s linear .1";
            stopBtn.style.animation = "btn_disappear 1s linear .1";

            setTimeout(function () { startBtn.style.display = "none"; }, 100);
            setTimeout(function () { stopBtn.style.display = "block"; }, 100);

            // when start btn clicked, dialog disappears
            document.getElementById("timerDialog").style.animation = "timerDialog2 10s linear 1";
            setTimeout(function () { document.getElementById("timerDialog").style.display = "none"; }, 500);
        } else{
            startBtn.style.animation = "btn_disappear 1s linear .1";
            stopBtn.style.animation = "btn_appear 1s linear .1";

            setTimeout(function () { stopBtn.style.display = ""; }, 100);
            setTimeout(function () { startBtn.style.display = "block"; }, 100);
        }
    }
    function setStartStopDefBtn(){
        // when clear btn clicked, pause button avatar clears
        if (startBtn.style.display == "none") {
            stopBtn.style.display = "";
            startBtn.style.display = "block";
        }
    }

    start.addEventListener("click", startStopTimer);
    start.addEventListener("click", startTimer);

    stop.addEventListener("click", startStopTimer);
    stop.addEventListener("click", stopTimer);

    clear.addEventListener("click", setStartStopDefBtn);
    clear.addEventListener("click", clearTimer);

}

setTimer();

























// Dialogs (Message Block)

// Timer 

window.addEventListener("scroll", markTimerControler);

// state 
let timerDialogAnimTime = 10000;

// getting same effect, when refreshing in at pos under scrollTop > ...
if (document.documentElement.scrollTop > 100){
    document.getElementById("timerDialog").style.display = "block";
    document.getElementById("timerDialog").style.animation = `timerDialog 10s linear 1`;
    setTimeout(function () { document.getElementById("timerDialog").style.display = "none"; }, timerDialogAnimTime);
}

// function

let doneTheStuff;

function markTimerControler() {
    if (document.documentElement.scrollTop > 100) {
        if (!doneTheStuff) {
            document.getElementById("timerDialog").style.display = "block";
            doneTheStuff = true;
        }
        // NOTE 'display' property doesn't work in animations
        document.getElementById("timerDialog").style.animation = `timerDialog 10s linear 1`;
        setTimeout(function () { document.getElementById("timerDialog").style.display = "none"; }, timerDialogAnimTime);
    }
}


// INSERT ANSWERS, ANSWER STATUS TABLE

// <table> nuance comm-ed the del-ed (find on github)

// trial place

// declaring arr +trial assign
let checkSheet0 = [
    [2, 2, 3, 1],
    [4, 2, 1, 1],
    [2, 3, 2, 2],
    [3, 4, 2, 4],
];

let checkSheet = [
    [1, 1, 0, 1, 1, 0],
    [1, 0, 0, 1, 1, 0],
    [1, 0, 0, 1, 1, 0],
    [1, 0, 1, 1, 1, 0],
    [1, 1, 0, 1, 1, 0],
];


// Answers__input

// answerInputBtn

let loadInsertAnswersBtn = document.getElementById("answerInputBtn");
loadInsertAnswersBtn.addEventListener("click", loadInsertAnswers);

let loaderIndexOf_setEmptyArrs_selInpMeth = 0;

function loadInsertAnswers(checkSheet) {
    // (#task df none anim)
    if (document.getElementById("answerInputCont").style.height != "60px") {
        // document.getElementById("answerInputCont").style.display = "flex";
        // setTimeout(function(){document.getElementById("answerInputCont").style.height = "60px";}, 1);
        document.getElementById("answerInputCont").style.height = "60px";
        loadInsertAnswersBtn.innerHTML = "<i>Close</i>";

    } else {
        // loaderInsAnswScroll = 1;
        document.getElementById("answerInputCont").style.height = "0px";
        loadInsertAnswersBtn.innerHTML = "<i>Insert</i> Answers";
        // setTimeout(function(){document.getElementById("answerInputCont").style.display = "none";}, 755);
    }

    if (loaderIndexOf_setEmptyArrs_selInpMeth == 0) {
        // calls only once (which was needed)

        selectingMethodOfPushingAnswer();

        setAnswerSheetEmptyArrays(checkSheet);

        loaderIndexOf_setEmptyArrs_selInpMeth++;
    }
}

function setAnswerSheetEmptyArrays() {
    // pushing empty arrays to [answerSheet]
    for (let i in checkSheet) {
        answerSheet.push([]);
        for (let j in checkSheet[i]) {
            answersOfFollowingTask.push([]);
        }
    }
}



// answInpCont__form--submit

let submitAnswerInput = document.getElementById("answerSubmit");
// addEvnList is in func 'selectingMethodOfPushingAnswer()' > 'if else' stat.

function getValueAnswerInput() {
    // getting value from <input> then spliting it
    for (let i in checkSheet) {
        // answerRegexp
        if (answerRegexp.test(document.getElementById("answerInput").value)) {
            submitInputValue = document.getElementById("answerInput").value;
        } else {
            break;
        }

        if (answerSheet[i] == "") {
            for (let c in submitInputValue) {
                answersOfFollowingTask.push(+submitInputValue[c]);
                answerSheet[i].push(+submitInputValue[c]);
            }
        } else {
            // if answerSheet[i] is not empty 'continue;' ...
            // ... for omitting from assigning value to ' "" ' nothing
            continue;
        }
        document.getElementById("answerInput").value = "";
    }

    // auto refresh statTbl (esp. needed when statTbl 'loaded')(live changes)
    if (loaderIndexAnswerStatusTable == 0) {
        generateAnswerStatusTable();
        for (let ch = 0; ch < document.getElementById("answStatusTableCont").children.length; ch++) {
            document.getElementById("answStatusTableCont").children[0].remove();
        }
    }
}


function getValueMultiAnswerInput() {
    // getting value from <input> and directly pushing it 
    for (let i in checkSheet) {
        if (answerSheet[i] == '') {
            // checks whether all 4 inputs are matching regex or not
            if (answerRegexp.test(document.getElementById(`answerInput${1}`).value)
                && answerRegexp.test(document.getElementById(`answerInput${2}`).value)
                && answerRegexp.test(document.getElementById(`answerInput${3}`).value)
                && answerRegexp.test(document.getElementById(`answerInput${4}`).value)) {

                answerSheet[i].push(document.getElementById(`answerInput${1}`).value);
                answerSheet[i].push(document.getElementById(`answerInput${2}`).value);
                answerSheet[i].push(document.getElementById(`answerInput${3}`).value);
                answerSheet[i].push(document.getElementById(`answerInput${4}`).value);

                document.getElementById(`answerInput${1}`).value = "";
                document.getElementById(`answerInput${2}`).value = "";
                document.getElementById(`answerInput${3}`).value = "";
                document.getElementById(`answerInput${4}`).value = "";
            } else {
                break;
            }
        } else {
            continue;
        }
    }
    // auto refresh statTbl (esp. needed when statTbl 'loaded')(live changes)
    if (loaderIndexAnswerStatusTable == 0) {
        generateAnswerStatusTable();
        for (let ch = 0; ch < document.getElementById("answStatusTableCont").children.length; ch++) {
            document.getElementById("answStatusTableCont").children[0].remove();
        }
    }
}













let answersanswPushInputMethodod = [];

// #task turn into strict mode 
let answerNumberInSingleTask;
let answerRegexp;

// 4 x 1 in single form
function answPushInputMethod1() {
    let parent = document.getElementById('answInpContForm');

    let inp = document.createElement("INPUT");
    inp.setAttribute("type", "text");

    parent.appendChild(inp);

    parent.children[0].id = 'answerInput';
    parent.children[0].placeholder = 'Insert Answers:';
    parent.children[0].maxLength = '4';

    answerRegexp = /[1-4-]{4}/;
    // used in statTbl and resTbl
    answerNumberInSingleTask = 4;
}

// 4 x 1 in 4 forms
function answPushInputMethod2(answerNumberInSingleTask) {
    let parent = document.getElementById('answInpContForm');

    let index = ['1st', '2nd', '3rd', '4th'];

     // used in statTbl and resTbl
    //  answerNumberInSingleTask = 4;
     // answerNumberInSingleTask = 2;

    for (let i = 0; i < answerNumberInSingleTask; i++) {
        inp = document.createElement("INPUT");
        inp.setAttribute("type", "text");
        parent.appendChild(inp);

        parent.children[i].className = 'answInpContForm__input';
        parent.children[i].placeholder = `Ins ${index[i]}`;
        parent.children[i].maxLength = '3';

        parent.children[i].id = `answerInput${i + 1}`;
    }

    // 1. starts & ends 1.1 '0' only, 1.2 '-' only, 2. starts in any num except 0 then 0-2 times any num
    answerRegexp = /^[0]$|^-$|^[1-9]{1}[0-9]{0,2}$/;
   
}

// 6 x 1 in single form
function answPushInputMethod3() {
    let parent = document.getElementById('answInpContForm');

    let inp = document.createElement("INPUT");
    inp.setAttribute("type", "text");

    parent.appendChild(inp);

    parent.children[0].id = 'answerInput';
    parent.children[0].placeholder = 'Insert Answers: TrWr';
    parent.children[0].maxLength = '6';

    answerRegexp = /[0-1-]{6}/;
    // used in statTbl and resTbl
    answerNumberInSingleTask = 6;
}

function selectingMethodOfPushingAnswer() {
    if (document.getElementById('selectCheckSheetSubj').value == 'Math') {
        if (document.getElementById('selectCheckSheetChap').value == '1') {

            answPushInputMethod1();

            submitAnswerInput.addEventListener("click", getValueAnswerInput);

        } else if (document.getElementById('selectCheckSheetChap').value == '2') {
            
            answPushInputMethod2(4);

            submitAnswerInput.addEventListener("click", getValueMultiAnswerInput);
            
        } else if (document.getElementById('selectCheckSheetChap').value == '3') {
            
            answPushInputMethod3();
            
            submitAnswerInput.addEventListener("click", getValueAnswerInput);
        }
    } else {
        // def 4x1 method (multi answers)
        
        answPushInputMethod2(4);
        
        submitAnswerInput.addEventListener("click", getValueMultiAnswerInput);
    }
}answerNumberInSingleTask = 4;

// answers__status-table

// answStatTbl__btn

let generateAnswerStatusTableBtn = document.getElementById("answStatusTableBtn");
generateAnswerStatusTableBtn.addEventListener("click", answerStatusTable);

let loaderIndexAnswerStatusTable = 1;

function answerStatusTable() {
    if (loaderIndexAnswerStatusTable === 1) {
        for (let ch = 0; ch < document.getElementById("answStatusTableCont").children.length; ch++) {
            document.getElementById("answStatusTableCont").children[0].remove();
        }
        generateAnswerStatusTable();

        document.getElementById("answStatusTableBtn").innerHTML = "<i>Close</i>";
        loaderIndexAnswerStatusTable = 0;

    } else {
        for (let ch = 0; ch < document.getElementById("answStatusTableCont").children.length; ch++) {
            document.getElementById("answStatusTableCont").children[0].remove();
        }
        document.getElementById("answStatusTableBtn").innerHTML = "Answer Status Table";
        loaderIndexAnswerStatusTable++;
    }
}

// answStatTbl__content
function generateAnswerStatusTable() {
    let answerInputTable = document.getElementById("answStatusTableCont");

    let answerStatusTable = document.createElement("table");
    let answerStatusTableBody = document.createElement("tbody");
    // top side (N, 1 2 3 4 ..)
    for (let i = 0; i < 1; i++) {
        let raw = document.createElement("tr");
        for (let n = 0; n < 1; n++) {
            let head = document.createElement("th");
            let headText = document.createElement("div");
            headText.innerHTML = "N";

            head.appendChild(headText);
            raw.appendChild(head);
        }
        for (let j = 0; j < answerNumberInSingleTask; j++) {
            let head = document.createElement("th");
            let headText = document.createElement("div");
            headText.innerHTML = `${j + 1}`;

            head.appendChild(headText);
            raw.appendChild(head);
        }
        answerStatusTableBody.appendChild(raw);
    }
    // main content 
    for (let i = 0; i < checkSheet.length; i++) {
        let raw = document.createElement("tr");
        for (let n = 0; n < 1; n++) {
            let head = document.createElement("th");
            let headText = document.createElement("div");
            headText.innerHTML = `${i + 1}`;

            head.appendChild(headText);
            raw.appendChild(head);
        }
        for (let j = 0; j < answerNumberInSingleTask; j++) {
            let head = document.createElement("td");
            let headText = document.createElement("div");
            // headText.innerHTML = `${j+1}`;
            if (answerSheet[i]) {
                headText.innerHTML = `${answerSheet[i][j]}`;
                // getting rid of printing 'NaN'
                if (isNaN(answerSheet[i][j])) {
                    head.style.backgroundColor = "#ebecec";
                    headText.innerHTML = `-`;
                }
                // getting rid of printing 'undefined' (or having confl with NaN ('-'))
                if (answerSheet[i] == "") {
                    head.style.backgroundColor = "#f0eadd";
                    headText.innerHTML = "";
                }
            } else {
                head.style.backgroundColor = "#f0eadd";
            }

            head.appendChild(headText);
            raw.appendChild(head);
        }
        answerStatusTableBody.appendChild(raw);
    }

    answerStatusTable.appendChild(answerStatusTableBody);
    answerInputTable.appendChild(answerStatusTable);
}
// BACK TO TOP

// backToTop state

// state before being scrolled
if(document.documentElement.scrollTop > 100){
    backToTop.style.display = "block";
}

// state after scrolling
window.addEventListener("scroll", setBackToTop);

function setBackToTop(){
    if(document.documentElement.scrollTop > 100 || document.body.scrollTop > 100){
        backToTop.style.display = "block";
    }else{
        backToTop.style.display = "none";
    }
}

// backToTop function

backToTop = document.getElementById("backToTop");
backToTop.addEventListener("click", scrollUp);

function scrollUp(){
    scrollDuration = 700;
    document.documentElement.scrollTop = 0;
}



// functionality in MAIN_TABLE

// Checks answers

function checkAnswers(){
    // Checking answers (comparing elem by elem)
    for(let i = 0; i < checkSheet.length; i++){
        resultSheet.push([]);
        for(let j = 0; j < checkSheet[0].length; j++){
            if(answerSheet[i][j] == checkSheet[i][j]){
                resultSheet[i].push("true");
            }
            else if(isNaN(answerSheet[i][j])){
                resultSheet[i].push("-");
            }
            else{
                resultSheet[i].push("false");
            }
        }
    }
    // console.log(`ResultSheet`);
    // console.log(resultSheet);

    // Getting Statistics ([resultSheet] -> {overallResultSheet})
    for(let i = 0; i < resultSheet.length; i++){
        for(let j = 0; j < resultSheet[0].length; j++){
            
            // presenting [resultSheet] elems in [simpleResultSheet] (from 2d -> 1d)
            simpleResultSheet.push(resultSheet[i][j]);

            // getting statistics in {overallResultSheet}
            overallResultSheet['trueAnswers'] = simpleResultSheet.filter(match => match == "true").length;
            overallResultSheet['falseAnswers'] = simpleResultSheet.filter(match => match == "false").length;
            overallResultSheet['emptyAnswers'] = simpleResultSheet.filter(match => match == "-").length;
            
            // console.log(overallResultSheet);
        }
    }

    // console.log(`overallResultSheet`);
    // console.log(overallResultSheet);
}// Result Tabel (button, content)

// resultTable__Btn

let loaderIndexOfDisplayResultTable = 1;

function displayResultTable(){

    checkAnswers();

    if(loaderIndexOfDisplayResultTable === 1){
        generateResultTable();
        document.getElementById("resultTableBtn").innerHTML = "Close Table";
        loaderIndexOfDisplayResultTable = 0;
    }else{
        document.getElementById("resTblContTable").children[0].remove();
        document.getElementById("resultTableBtn").innerHTML = "Generate Table";
        loaderIndexOfDisplayResultTable++;
    }
    // add timer animation #task
    stopTimer();
}

let generateResultTableBtn = document.getElementById("resultTableBtn");
generateResultTableBtn.addEventListener("click", displayResultTable);



// resultTable__Content

// let answerNumberInSingleTask = 4;

function generateResultTable(){

    // let body = document.getElementsByTagName("body")[0];
    
    let tbl = document.createElement("table");

    // tbl.classList.add("tbl");

    let tblBody = document.createElement("tbody");
    // top side (N, 1 2 3 answerNumberInSingleTask)
    for(let i = 0; i < 1; i++){
        let row = document.createElement("tr");
        for(let j = 0; j < 1; j++){
            let head = document.createElement("th");
            let headText = document.createTextNode("N");

            head.appendChild(headText);
            row.appendChild(head);
        }
        for(let j = 0; j < answerNumberInSingleTask; j++){
            let cell = document.createElement("th");
            let cellText  = document.createTextNode(`${j+1}`);
            // my 1 check (note)
            if(j == 0){
                cellText  = document.createTextNode(`(my) ${j+1} (check)`);
            }

            cell.appendChild(cellText);
            row.appendChild(cell);
        }
        tblBody.appendChild(row);
    }
    
    // table main content
    for(let n = 0; n < checkSheet.length; n++){
        // table height
        for(let i = 0; i < 1; i++){
            let row = document.createElement("tr");
            
            // lf side (1,2,3...9,10)
            for(let j = 0; j < 1; j++){
                let head = document.createElement("th");
                // table number of task
                let headText = document.createTextNode(`${n+1}`);
    
                head.appendChild(headText);
                row.appendChild(head);
            }
            // table width (task values 3in1)
            for(let j = 0; j < answerNumberInSingleTask; j++){
                let cell = document.createElement("td");

                // div of AnserSheetValue and CheckSheetValue (2 of 3)
                let valueAnswerSheetCheckSheet = document.createElement("div");
                
                valueAnswerSheetCheckSheet.style.display = "flex";
                valueAnswerSheetCheckSheet.style.justifyContent = "space-evenly";

                    let answerSheetValue  = document.createElement("p");
                    // checks whether "undefined", 'NaN'('-') or not
                    if(typeof answerSheet[n][j] == "undefined"){
                        answerSheetValue.innerHTML = `–`;
                    }else if(isNaN(answerSheet[n][j])){
                        answerSheetValue.innerHTML = `-`;
                    }else{
                        answerSheetValue.innerHTML = `${answerSheet[n][j]}`;
                    }

                    let checkSheetValue  = document.createElement("p");
                    checkSheetValue.innerHTML = `${checkSheet[n][j]}`;

                    valueAnswerSheetCheckSheet.appendChild(answerSheetValue);
                    valueAnswerSheetCheckSheet.appendChild(checkSheetValue);

                // h3 of resultSheetValue (1 of 3 (last))
                let resultSheetValue  = document.createElement("h3");
                resultSheetValue.innerHTML = `${resultSheet[n][j]}`;

                    // coloring resultSheetValue backgrounds (true, false, - => to green, red, #ebecec)
                    if(resultSheetValue.innerHTML == "true"){
                        resultSheetValue.style.backgroundColor = "green";

                    }else if(resultSheetValue.innerHTML == "false"){
                        resultSheetValue.style.backgroundColor = "red";
                    }else{
                        resultSheetValue.style.backgroundColor = "#ebecec";
                    }

                cell.appendChild(valueAnswerSheetCheckSheet);
                cell.appendChild(resultSheetValue);
                row.appendChild(cell);
            }
            tblBody.appendChild(row);
        }
    }

    // bottom side 1 (Stat, trueAnswers falseAnswers emptyAnswers All)
    for(let i = 0; i < 1; i++){
        let row = document.createElement("tr");
        // Stat.
        for(let j = 0; j < 1; j++){
            let head = document.createElement("th");
            let headText = document.createTextNode("Stat.");

            head.appendChild(headText);
            row.appendChild(head);
        }
        let keysOverallResultSheet = Object.getOwnPropertyNames(overallResultSheet);
        // console.log(`keys`);
        // console.log(keysOverallResultSheet);

        // {overallResultSheets} keys presented by [keysOverallResultSheet]
        for(let j = 0; j < 3; j++){
            let head = document.createElement("th");

            let headText = document.createElement("hanswerNumberInSingleTask");
            headText.innerHTML = `${keysOverallResultSheet[j]}`;

                if(headText.innerHTML == "trueAnswers"){
                    headText.innerHTML = 'True Answers';
                    headText.style.color = "green";
                    headText.style.border = "1px solid green";
                }else if(headText.innerHTML == "falseAnswers"){
                    headText.innerHTML = 'False Answers';
                    headText.style.color = "red";
                    headText.style.border = "1px solid red";
                }else{
                    headText.innerHTML = 'Empty Answers';
                    headText.style.color = "#990000";
                    headText.style.border = "1px solid #990000";
                }

            head.appendChild(headText);
            row.appendChild(head);
        }
        // bottom side "All"
        for(let j = 0; j < 1; j++){
            let head = document.createElement("th");
            let headText = document.createTextNode(`All`);

            head.appendChild(headText);
            row.appendChild(head);
        }
        tblBody.appendChild(row);
    }
    // bottom side 2 (answers)
    for(let i = 0; i < 1; i++){
        let row = document.createElement("tr");
        // -
        for(let j = 0; j < 1; j++){
            let head = document.createElement("th");
            let headText = document.createTextNode("");

            head.appendChild(headText);
            row.appendChild(head);
        }
        // value of trueAnswers
        for(let j = 0; j < 1; j++){
            let cell = document.createElement("td");
            let cellText1  = document.createTextNode(`${overallResultSheet["trueAnswers"]}`);

            cell.appendChild(cellText1);
            row.appendChild(cell);
        }
        // value of falseAnswers
        for(let j = 0; j < 1; j++){
            let cell = document.createElement("td");
            let cellText1  = document.createTextNode(`${overallResultSheet["falseAnswers"]}`);

            cell.appendChild(cellText1);
            row.appendChild(cell);
        }
        // value of emptyAnswers
        for(let j = 0; j < 1; j++){
            let cell = document.createElement("td");
            let cellText1  = document.createTextNode(`${overallResultSheet["emptyAnswers"]}`);

            cell.appendChild(cellText1);
            row.appendChild(cell);
        }
        // number of all tasks
        for(let j = 0; j < 1; j++){
            let cell = document.createElement("td");
            let cellText1  = document.createTextNode(`${simpleResultSheet.length}`);

            cell.appendChild(cellText1);
            row.appendChild(cell);
        }

        tblBody.appendChild(row);
    }
    tbl.appendChild(tblBody);
    
    let table = document.getElementById("resTblContTable");
    
    table.appendChild(tbl);
}










// Select

// Sel subj

let selSubj_Select = document.getElementById("selectCheckSheetSubj");

selSubj = selSubjObj;

// generating subj options
genSelectOption(selSubj_Select, selSubj);

selSubj_Select.addEventListener("change", genYearBySubj);

// set [selYear] depending on [selSubj]
function genYearBySubj(){
    for(let subj = 0; subj < selSubj.length; subj++){
        if(selSubj_Select.value == selSubj[subj]){
            selYear = selYearObj[subj];
            break;
        }
    }

    // generating year options
    genSelectOption(selYear_Select, selYear);
}



// Sel year 

let selYear_Select = document.getElementById("selectCheckSheetYear");

selYear_Select.disabled = true;

selYear_Select.addEventListener("change", genRepByYear);

// set [selRep] depending on [selYear]
function genRepByYear(){
    // Setting selRep
    for(let subj = 0; subj < selSubj.length; subj++){
        if(selSubj_Select.value == selSubj[subj]){
            for(let year = 0; year < selYear.length; year++){
                if(selYear_Select.value == selYear[year]){
                    selRep = selRepObj[subj][year];
                    break;
                }
            }
        }
    }

    // generating rep options
    genSelectOption(selRep_Select, selRep);
}



// Sel rep

let selRep_Select = document.getElementById("selectCheckSheetRep");

selRep_Select.disabled = true;

selRep_Select.addEventListener("change", genChapByRep);

function genChapByRep(){
    // Setting selChap
    // Setting subjYearRep depending on (Subj>Year>Rep)
    for(let subj = 0; subj < selSubj.length; subj++){
        if(selSubj_Select.value == selSubj[subj]){
            for(let year = 0; year < selYear.length; year++){
                if(selYear_Select.value == selYear[year]){
                    for(let rep = 0; rep < selRep.length; rep++){
                        if(selRep_Select.value == selRep[rep]){
                            selChap = selChapObj[subj][year][rep];
                            subjYearRep = repKeys[subj][year][rep];
                            break;
                        }
                    }
                }
            }
        }
    }

    // generating rep options
    genSelectOption(selChap_Select, selChap);
}



// sel chap

let selChap_Select = document.getElementById("selectCheckSheetChap");

selChap_Select.disabled = true;

selChap_Select.addEventListener("change", genSecByChap);

// #task add shift nuance in phys secs

function genSecByChap(){
    selSec = selSecObj;

    // Setting selSec
    for(let subj = 0; subj < selSubj.length; subj++){
        if(selSubj_Select.value == selSubj[subj]){
            for(let year = 0; year < selYear.length; year++){
                if(selYear_Select.value == selYear[year]){
                    for(let rep = 0; rep < selRep.length; rep++){
                        if(selRep_Select.value == selRep[rep]){
                            for(let chap = 0; chap < selChap.length; chap++){
                                if(selChap_Select.value == selChap[chap]){
                                    selSec = selSecObj[subj][year][rep][chap];
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // generating rep options
    genSelectOption(selSec_Select, selSec);
}



// Sel sec

let selSec_Select = document.getElementById("selectCheckSheetSec");

let selSec;

selSec_Select.disabled = true;

selSec_Select.addEventListener("change", genCheckSheetBySec);

function genCheckSheetBySec(){
    // Setting selAnswersheet
    // Setting pageNumber
    for(let subj = 0; subj < selSubj.length; subj++){
        if(selSubj_Select.value == selSubj[subj]){
            for(let year = 0; year < selYear.length; year++){
                if(selYear_Select.value == selYear[year]){
                    for(let rep = 0; rep < selRep.length; rep++){
                        if(selRep_Select.value == selRep[rep]){
                            for(let chap = 0; chap < selChap.length; chap++){
                                if(selChap_Select.value == selChap[chap]){
                                    for(let sec = 0; sec < selSec.length; sec++){
                                        if(selSec_Select.value == selSec[sec]){
                                            pageNumber = secPageNumbers[subj][year][rep][chap][sec];
                                            // console.log('checking overload times');
                                            checkSheet = secChecksheets[subj][year][rep][chap][sec];
                                            // console.log(`sel-ed checkSheet ${checkSheet}`);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

}





// function declarations

function genSelectOption(selFilter_Select, selFilter){
    // avoiding from overgen options
    selFilter_Select.options.length = 1;
    // gen options
    for(let i = 0; i < selFilter.length; i++){
        let option = document.createElement("OPTION");
        option.text = `${selFilter[i]}`;
        option.value = `${selFilter[i]}`;
        selFilter_Select.add(option);
    }
    selFilter_Select.disabled = false;
}


// clear select
let clearBtn = document.getElementById("clearSelect");

// clearBtn.disabled = true;

clearBtn.addEventListener("dblclick", clearSelect);

function clearSelect(){
    selSubj_Select.value = "";
    selYear_Select.value = "";
    selYear_Select.disabled = true;

    selRep_Select.value = "";
    selRep_Select.disabled = true;

    selChap_Select.value = "";
    selChap_Select.disabled = true;
    
    selSec_Select.value = "";
    selSec_Select.disabled = true;
}
























































// IFRAME

// #task (additional read material) 'import' & 'export' nuance;

// #task remove ad, (tried once,but met XSS (Cross-site scripting) disturber circumstance)

// def vals (avoid from error in case of clicking loafIframe without pointing 'select' filters)
let subjYearRep = repKeys[0][0][0]; 
let pageNumber = 1;


function loadIframe(subjYearRep, pageNumber){
    
    let iframeLink = `https://online.fliphtml5.com/ywkgy/${subjYearRep}/#p=${pageNumber}`;

    document.getElementById("iframeSource").src = iframeLink; 

    // load and disload iframe
    let iframeBtn = document.getElementById("loadIframe");

    if(document.getElementsByClassName("ifrCont__content")[0].style.display == ""){
        document.getElementsByClassName("ifrCont__content")[0].style.display = "block";
        iframeBtn.style.backgroundColor = "#323232";
        iframeBtn.style.color = "#000";
        iframeBtn.innerHTML = "Close Book";

    }else{
        document.getElementsByClassName("ifrCont__content")[0].style.display = "";
        iframeBtn.innerHTML = "Open Book";

        iframeBtn.style.backgroundColor = "#fff";
        iframeBtn.style.color = "#323232";
        // Scroll Iframe, when Closed
        // Checks whether scrollPageTo() def or not (scroll.js linked or not)
        if(typeof scrollPageTo != 'undefined'){
            setTimeout(scrollPageTo('iframe', 'iframeScrollDown', takeCareScrollDown), 250);
        }
    }
} 


loadIframeBtn = document.getElementById("loadIframe");
loadIframeBtn.addEventListener("click", function(){loadIframe(subjYearRep, pageNumber);});



// Iframe controler

var slider = document.getElementById("ifrContrSlider_Input");
var output = document.getElementById("demo");
output.innerHTML = slider.value;

slider.oninput = function(){
  output.innerHTML = this.value;
  document.getElementById('iframeContainer').style.height = `${this.value}px`;
}









function openNav() {
    document.getElementById("mySidenav").style.width = "100%";
}

function closeNav() {
    document.getElementById("mySidenav").style.width = "0";
}


// function openNav() {
//     document.getElementById("mySidenav").style.width = "250px";
//     document.getElementById("header").style.marginLeft = "450px";
//   }
  
//   function closeNav() {
//     document.getElementById("mySidenav").style.width = "0";
//     document.getElementById("header").style.marginLeft= "0";
//   }

let optBtn = document.getElementById('headerOptionalBtn');

optBtn.addEventListener('click', openNav);
// Setting overflow hidden 
// document.getElementById('mainBody').style.overflow = `hidden`;
// Scrolling page to the 0 point (while refreshing)

window.scrollTo(0, 1);



// Scroll Header

let headerGetStartedBtn = document.getElementById('headerGetStartedBtn');

// later global use
let headerScrollDown = document.getElementById("header").style.height;
headerScrollDown = +(headerScrollDown.substring(0, headerScrollDown.length - 2));

headerGetStartedBtn.addEventListener('click', function(){
    setTimeout(scrollPageTo('header', 'headerScrollDown', 0),
    document.getElementById('mainBody').style.overflow = 'visible', 250)});





// Scroll Timer

document.getElementById("timer").style.height = '420px';

let startTimerBtn = document.getElementById('sub_startTimer');

// later global use
let timerScrollDown = document.getElementById("timer").style.height;
timerScrollDown = +(timerScrollDown.substring(0, timerScrollDown.length - 2));
timerScrollDown += headerScrollDown;

startTimerBtn.addEventListener('click', function(){setTimeout(scrollPageTo('timer', 'timerScrollDown', headerScrollDown), 250)});





// Scroll Select

document.getElementById("selectCheckSheet").style.height = '560px';

let selectBtn = document.getElementById('selectCheckSheetSec');

// later global use
let selectScrollDown = document.getElementById("selectCheckSheet").style.height;
selectScrollDown = +(selectScrollDown.substring(0, selectScrollDown.length - 2));
selectScrollDown += timerScrollDown;

selectBtn.addEventListener('change', function(){setTimeout(scrollPageTo('selectCheckSheet', 'selectScrollDown', timerScrollDown), 250)});

let scrollSelect = document.getElementById('scrollSelect');

scrollSelect.addEventListener('click', function(){setTimeout(scrollPageTo('selectCheckSheet', 'selectScrollDown', timerScrollDown), 250)});






// Scroll TakeCare

// #lowbug #bug turning desktop from mobile in inspect, there is needing to refresh
if(screen.width > '650'){
    document.getElementById("takeCare").style.height = '350px';
}else{
    document.getElementById("takeCare").style.height = '550px';
}

let takeCareBtn = document.getElementById('takeCare');

// later global use
let takeCareScrollDown = document.getElementById("selectCheckSheet").style.height;
takeCareScrollDown = +(takeCareScrollDown.substring(0, takeCareScrollDown.length - 2));
takeCareScrollDown += selectScrollDown;

takeCareBtn.addEventListener('click', function(){setTimeout(scrollPageTo('takeCare', 'takeCareScrollDown', selectScrollDown), 250)});





// Scroll Iframe

document.getElementById('iframe').style.minHeight = '450px';

let startIframeBtn = document.getElementById('loadIframe');

// later global use
let iframeScrollDown = document.getElementById("iframe").style.minHeight;
iframeScrollDown = +(iframeScrollDown.substring(0, iframeScrollDown.length - 2));
iframeScrollDown += takeCareScrollDown;

// func called from above 'else' statement





// Scroll Insert Answers

document.getElementById("answerInputBtn").style.height = '50px';

let startInsAnswBtn = document.getElementById('answerInputBtn');

// later global use
let insAnswScrollDown = document.getElementById("answerInputBtn").style.height;
insAnswScrollDown = +(insAnswScrollDown.substring(0, insAnswScrollDown.length - 2));
insAnswScrollDown += iframeScrollDown;

// let loaderInsAnswScroll;

// if(loaderInsAnswScroll == 1){
//     startInsAnswBtn.addEventListener('click', function(){setTimeout(scrollPageTo('answerInputBtn', 'insAnswScrollDown', iframeScrollDown), 250)});
// }










// Scroll Module Function (for Header, Timer, Select, Iframe, InsAnsw)  

function scrollPageTo(selector, selectorScrollDown, prevSelectorScrollDown){
    let scrollDown = `${document.getElementById(selector).style.height}`;
    // #review minHeight nuance disturbing
    if(selector == 'iframe'){
        scrollDown = `450px`;
    }
    // scroll To
    scrollDown = scrollDown.substring(0, scrollDown.length - 2);
    scrollDown = +scrollDown + +prevSelectorScrollDown;
    window.scrollTo(0, scrollDown);
    // for next calls
    selectorScrollDown = scrollDown;
    prevSelectorScrollDown = scrollDown;
}



















